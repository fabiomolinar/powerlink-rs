// crates/powerlink-rs/src/nmt/events.rs
// Added NmtCommand enum

/// Defines NMT Command IDs used in NMT Command frames.
/// (Reference: EPSG DS 301, Appendix 3.7)
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u8)]
pub enum NmtCommand {
    StartNode = 0x21,
    StopNode = 0x22,
    EnterPreOperational2 = 0x23,
    EnableReadyToOperate = 0x24,
    ResetNode = 0x28,
    ResetCommunication = 0x29,
    ResetConfiguration = 0x2A,
    SwReset = 0x2B,
    // Extended commands (require parsing Node List in payload) are not included here for simplicity
}

/// Defines events that can trigger a state transition in the NMT state machine.
///
/// These are derived from NMT commands or internal conditions.
/// (Reference: EPSG DS 301, Table 107 for CN, Figure 73 for MN)
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum NmtEvent {
    // --- NMT Command Events (received by CN, potentially generated by MN) ---
    /// Corresponds to the `NMTStartNode` command.
    StartNode,
    /// Corresponds to the `NMTStopNode` command.
    StopNode,
    /// Corresponds to the `NMTEnterPreOperational2` command.
    EnterPreOperational2,
    /// Corresponds to the `NMTEnableReadyToOperate` command.
    EnableReadyToOperate,
    /// Corresponds to the `NMTReset` command (hardware or other external reset).
    Reset,
    /// Corresponds to the `NMTSwReset` command.
    SwReset,
    /// Corresponds to the `NMTResetNode` command.
    ResetNode,
    /// Corresponds to the `NMTResetCommunication` command.
    ResetCommunication,
    /// Corresponds to the `NMTResetConfiguration` command.
    ResetConfiguration,

    // --- Internal/Timing Events ---
    /// Triggered internally or by receiving a POWERLINK frame. (Used by CN)
    EnterEplMode, // Maybe remove? Implicitly handled by Soc/SoA received.
    /// Triggered when a timer expires (e.g., NotActive timeout).
    Timeout,
    /// Triggered by a significant DLL or application error.
    Error,

    // --- Frame Reception Events ---
    /// Triggered when node received a SoC or SoA frame. (Used by CN NMT_CT2)
    SocSoAReceived,
    /// The CN received a SoC frame. (Used by CN NMT_CT4)
    SocReceived,
    /// Any powerlink frame received (Used by CN NMT_CT12).
    PowerlinkFrameReceived,

    // --- Controlled Node (CN) Specific Application Events ---
    /// Configuration completed and the CN is ready to operate. (Used by CN NMT_CT6)
    CnConfigurationComplete,

    // --- Managing Node (MN) Specific Internal Events ---
    /// All mandatory CNs identified. (Used by MN NMT_MT3)
    AllCnsIdentified,
    /// MN configuration complete and all mandatory CNs ready to operate. (Used by MN NMT_MT4)
    ConfigurationCompleteCnsReady,
    // Note: NMT_MT5 (ReadyToOp -> Operational) is triggered by NmtEvent::StartNode in this implementation.
}
